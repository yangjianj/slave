# -*- coding: utf-8 -*-
import unittest
from lib.HtmlTestRunner import HTMLTestRunner
from lib.api_test import Apiclient
from lib.tool import *
from lib.database_con import  DataManager
from lib.log_manager import LogManager
import config

class ApiRunner():
    def __init__(self,task):
        self.all_cases = task["data"]["cases"]
        self.version = task["data"]["version"]
        self.taskid = task["id"]
        self.table=config.API_RESULT_TABLE
        self.logger=LogManager()

    def run(self):
        result=[]
        for case in self.all_cases:
            client = Apiclient(case)
            re=client.test()
            re["case"]=case
            self._save_result(re)  #每执行完一条case就存储到数据库
            result.append(re)
        return result

    def _save_result(self,apiresult):
        db=DataManager()
        message =db.save_api_result(apiresult)
        if message != True:
            self.logger.error(message)


class UiRunner():
    def __init__(self,task):
        dt = datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
        self.all_cases = task["data"]["cases"]
        self.version = task["data"]["version"]
        self.taskid = task["id"]
        self.casedir = config.UICASE_DIR
        self.reportfile = os.path.join(config.UI_REPORT_DIR,dt+'htmltestrunner.html')
        self.table = config.UI_RESULT_TABLE
        self.logger = LogManager()

    #根据文件名匹配case
    def run_by_pattern(self,filelist):
        discover = None
        for index,item in enumerate(filelist):
            if index == 0:
                discover = unittest.defaultTestLoader.discover(self.casedir, pattern=item, top_level_dir=None)
            else:
                discover_tmp = unittest.defaultTestLoader.discover(self.casedir, pattern=item, top_level_dir=None)
                discover.addTests(discover_tmp._tests)
        with open(self.reportfile,'wb') as f:
            runner = HTMLTestRunner(stream=f,
                                    verbosity=2,
                                    title='my report',
                                    description='generated by htmltestrunner')
            all_result=runner.run(discover)
        return all_result

    #根据case名匹配case
    def run_by_casename(self):
        caselist = ['lianjia.ui_lianjia_test_001.Base_t1.test_run3','lianjia.ui_lianjia_test_001.Base_t1.test_run']
        discover = unittest.TestLoader().loadTestsFromNames(caselist,module=None)
        with open(self.reportfile,'wb') as f:
            runner = HTMLTestRunner(stream=f,
                                    verbosity=2,
                                    title='my report',
                                    description='generated by htmltestrunner')
            all_result=runner.run(discover)
        return all_result

    def run(self):
        caselist = []
        for case in self.all_cases:
            caselist.append(case['suitename']+'.py')
        result = self.run_by_pattern(caselist)
        self._save_result(result)

    def _save_result(self,result):
        print(result.result)
        print(result.success_count)
        print(result.error_count)
        print(result.failure_count)
        print(result.starttime)
        print(result.endtime)
        result_map = ['pass', 'fail', 'error']
        db = DataManager()

        for item in result.result:
            re = result_map[item[0]]
            case = item[1]
            message = item[2]
            error = item[3]
            starttime = item[4]
            endtime = item[5]
            re = db.save_ui_result(re,case,message,error,starttime,endtime)
            if re != True:
                self.logger.error(re)


if __name__=="__main__":
    cc=UiRunner(1)
    cc.run()